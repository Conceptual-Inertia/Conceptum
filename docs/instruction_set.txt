
/*
 *
 * FANNGGOVITCH STANDARD BYTECODE FORMAT - .fng files
 *
 * COPYRIGHT (C) RUIJIE FANG <ruijief@acm.org> 2016
 * ALL RIGHTS RESERVED.
 *
 * PUBLISHED UNDER THE GNU GENERAL PUBLIC LICENSE v3.0.
 *
 * instruction set for the Conceptum & Inertia VM
 *
 * INSTRUCTION         |         DESCRIPTION
 * ====================+===========================
 * iadd                |           Integer Addition
 * isub                |           Integer Division
 * imul                |     Integer Multiplication
 *
 * fadd                            Float   Addition
 * fsub                |           Float   Division
 * fmul                |     Float   Multiplication
 *
 * ilt                 |          Integer Less Than
 * ieq                 |          Integer Equal  to
 *
 * flt                 |           Float  Less Than
 * feq                 |           Float Equal   to
 *
 * cconst              |           char const
 * iconst              |           integer const
 *
 * sconst              |           string const
 * fconst              |           Float const
 *
 *
 * ============= General Instructions ==============
 * call f()            |           Call function f()
 * ret                 |           return a value
 *
 * br a
 * brt a               |           Branch to a
 * brf a
 *
 * gload a             |           Load global a
 * gstore a            |           Store global a
 *
 * load i
 * store i
 *
 * fload i
 * fstore i
 *
 * print
 *
 * struct n
 *
 * pbear              | Prints an ASCII bear to stdout
 *
 * null               | The null value
 *
 * pop
 *
 * halt
 *
 * debug              | Allocates memory to explode
 *
 *
 */

/*
 * COMPILER GLOBALS
 */

#ifndef OPRND_STACK_SIZE
  #define OPRND_STACK_SIZE = 100
#endif

#ifnedf CALL_STACK_SIZE
  #define CALL_STACK_SIZE = 1000
#endif
#define CONCEPT_IADD 100 // Integer Addition OUTPUT: Integer
#define CONCEPT_IDIV 101 // Integer Division OUTPUT: Integer
#define CONCEPT_IMUL 102 // Integer Multiplication OUTPUT: Integer

#define CONCEPT_FADD 103 // Float Addition OUTPUT: Float
#define CONCEPT_FDIV 104 // Float Division OUTPUT: Float
#define CONCEPT_FMUL 105 // Float Multiplication OUTPUT: Float

#define CONCEPT_ILT 106 // Integer Less Than OUTPUT: Boolean
#define CONCEPT_IEQ 107 // Integer Equal To OUTPUT: Boolean
#define CONCEPT_IGT 108 // Integer Greater Than OUTPUT: Boolean
#define CONCEPT_FLT 109 // Float Less Than OUTPUT: Boolean
#define CONCEPT_FEQ 110 // Float Equal To OUTPUT: Boolean
#define CONCEPT_FGT 111 // Float Greater than OUTPUT: Boolean
#define CONCEPT_AND 112 // Boolean AND OUTPUT: Boolean
#define CONCEPT_OR  113 // Boolean OR  OUTPUT: Boolean
#define CONCEPT_XOR 114 // Boolean XOR OUTPUT: Boolean
#define CONCEPT_NE  115 // Boolean NE  OUTPUT: Boolean
#define CONCEPT_IF  116 // Boolean IF  OUTPUT: Boolean

#define CONCEPT_CCONST 117 // Initialize Char Constant OUTPUT: Void
#define CONCEPT_ICONST 118 // Initialize Integer Constant OUTPUT: Void
#define CONCEPT_SCONST 119 // Initialize String Constant OUTPUT: Void
#define CONCEPT_FCONST 120 // Initialize Float Constant OUTPUT: Void
#define CONCEPT_BCONST 121 // Initialize Boolean Constant OUTPUT: Void
#define CONCEPT_VCONST 122 // Initialize Void Constant OUTPUT: Void

#define CONCEPT_PRINT 123 // Print to stdout OUTPUT: Void
#define CONCEPT_CALL 124 // Call a procedure(void *)
#define CONCEPT_GLOAD 127 // Load global value
#define CONCEPT_GSTORE 128 // Store global value
#define CONCEPT_POP 129 // Pop a value out of stack
#define CONCEPT_IF_ICMPLE 130 // if_icmple
#define CONCEPT_GOTO 131 // Goto Statement
#define CONCEPT_RETURN 132 // Return
#define CONCEPT_INC 133
#define CONCEPT_DEC 134
#define CONCEPT_DUP 135
#define CONCEPT_SWAP 136
